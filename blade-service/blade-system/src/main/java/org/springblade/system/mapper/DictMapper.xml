<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.springblade.system.mapper.DictMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="dictResultMap" type="org.springblade.system.entity.Dict">
        <id column="id" property="id"/>
        <result column="parent_id" property="parentId"/>
        <result column="code" property="code"/>
        <result column="dict_key" property="dictKey"/>
        <result column="dict_value" property="dictValue"/>
        <result column="sort" property="sort"/>
        <result column="remark" property="remark"/>
        <result column="is_deleted" property="isDeleted"/>
    </resultMap>
    <resultMap id="dictVOResultMap" type="org.springblade.system.vo.DictVO">
        <id column="id" property="id"/>
        <result column="parent_id" property="parentId"/>
        <result column="code" property="code"/>
        <result column="dict_key" property="dictKey"/>
        <result column="dict_value" property="dictValue"/>
        <result column="sort" property="sort"/>
        <result column="remark" property="remark"/>
        <result column="is_deleted" property="isDeleted"/>
        <result column="has_children" property="hasChildren"/>
    </resultMap>

    <resultMap id="treeNodeResultMap" type="org.springblade.core.tool.node.TreeNode">
        <id column="id" property="id"/>
        <result column="parent_id" property="parentId"/>
        <result column="title" property="title"/>
        <result column="value" property="value"/>
        <result column="key" property="key"/>
    </resultMap>

    <select id="selectDictPage" resultMap="dictResultMap">
        select * from blade_dict where is_deleted = 0
    </select>

    <select id="getValue" resultType="java.lang.String">
        select
            dict_value
        from blade_dict where code = #{param1} and dict_key = #{param2} and is_deleted = 0
    </select>

    <!-- oracle 版本 -->
    <!--<select id="getValue" resultType="java.lang.String">
        select
            dict_value
        from blade_dict where code = #{param1, jdbcType=VARCHAR} and dict_key = #{param2} and dict_key >= 0  rownum 1
    </select>-->

    <select id="getList" resultMap="dictResultMap">
        select code, dict_key, dict_value, sort, remark from blade_dict where code = #{param1} and parent_id > 0 and is_sealed = 0 and is_deleted = 0
    </select>

    <select id="tree" resultMap="treeNodeResultMap">
        select id, parent_id, dict_value as title, id as "value", id as "key" from blade_dict where is_deleted = 0
    </select>

    <select id="parentTree" resultMap="treeNodeResultMap">
        select id, parent_id, dict_value as title, id as "value", id as "key" from blade_dict where is_deleted = 0 and parent_id = 0
    </select>
    <select id="dictionaryByCodes" resultType="org.springblade.system.entity.Dict">
        select
            code,
            dict_key,
            dict_value,
            sort,
            remark
        from
            blade_dict
        where
            parent_id > 0 and is_sealed = 0 and is_deleted = 0
            <foreach collection="codes" item="code" open="and code in (" separator="," close=")">
                #{code}
            </foreach>
    </select>

    <select id="lazyList"  resultMap="dictVOResultMap">
        SELECT
        dict.*,
        (
        SELECT
        CASE WHEN count( 1 ) > 0 THEN 1 ELSE 0 END
        FROM
        blade_dict
        WHERE
        parent_id = dict.id AND is_deleted = 0
        ) AS "has_children"
        FROM
        blade_dict dict
        WHERE dict.is_deleted = 0
        <if test="param1!=null">
            and dict.parent_id = #{param1}
        </if>
        <if test="param2.dictValue!=null and param2.dictValue!=''">
            and dict.dict_value like concat(concat('%', #{param2.dictValue}),'%')
        </if>
        <if test="param2.code!=null and param2.code!=''">
            and dict.code like concat(concat('%', #{param2.code}),'%')
        </if>
        ORDER BY dict.sort
    </select>


</mapper>
